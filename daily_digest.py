"""
–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞: –±–æ—Ç –ø—É–±–ª–∏–∫—É–µ—Ç 5 —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É.
–¢–µ–º—É –±–µ—Ä—ë–º –∏–∑ themes.yaml (–∫—Ä—É—Ç–∏–º –ø–æ –∫—Ä—É–≥—É) –∏–ª–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π DIGEST_TOPIC.
"""
import os, json, logging, time, random, yaml
from datetime import datetime
from common import send_telegram_photo, send_telegram, build_caption, gpt_summarize, pick_og_image

DIGEST_TOPIC = os.getenv("DIGEST_TOPIC", "").strip()
DIGEST_SIZE = int(os.getenv("DIGEST_SIZE", "5"))

def load_next_topic() -> str:
    path = "themes.yaml"
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = yaml.safe_load(f) or {}
        topics = data.get("topics", [])
        if not topics: return "–û—Å–µ–Ω–Ω–∏–µ —Ñ–∏–ª—å–º—ã –¥–ª—è —É—é—Ç–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞"
        # —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π —É–∫–∞–∑–∞—Ç–µ–ª—å
        idx = data.get("index", 0) % len(topics)
        topic = topics[idx]
        data["index"] = (idx + 1) % len(topics)
        with open(path, "w", encoding="utf-8") as f:
            yaml.safe_dump(data, f, allow_unicode=True)
        return topic
    except Exception:
        return "–û—Å–µ–Ω–Ω–∏–µ —Ñ–∏–ª—å–º—ã –¥–ª—è —É—é—Ç–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞"

def make_digest(topic: str, n: int):
    prompt = (f"–°–æ—Å—Ç–∞–≤—å –ø–æ–¥–±–æ—Ä–∫—É –∏–∑ {n} —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ —Ç–µ–º—É: ¬´{topic}¬ª. "
              "–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ (–≥–æ–¥) ‚Äî 1 –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ-–ø–æ—è—Å–Ω–µ–Ω–∏–µ. "
              "–ë–µ–∑ —Å–ø–æ–π–ª–µ—Ä–æ–≤, –∂–∏–≤–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ. –§–æ—Ä–º–∞—Ç: –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
    text = gpt_summarize(prompt, max_tokens=600) or f"{topic}: –ø–æ–¥–±–æ—Ä–∫–∞ –∏–∑ {n} —Ñ–∏–ª—å–º–æ–≤."
    return text

def main():
    topic = DIGEST_TOPIC or load_next_topic()
    body = make_digest(topic, DIGEST_SIZE)
    title = f"üé¨ –ü–æ–¥–±–æ—Ä–∫–∞: {topic}"
    caption = build_caption(title, body)
    # –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏: –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥–ª—É—à–∫—É —Å unsplash –ø–æ –∫–ª—é—á—É (–Ω–µ –æ–±—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–µ—Ç—å). –ü–æ—ç—Ç–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç.
    ok = send_telegram(caption)
    if not ok:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É")
    else:
        logging.info("–ü–æ–¥–±–æ—Ä–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: %s", topic)

if __name__ == "__main__":
    main()
