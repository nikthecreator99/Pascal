"""
–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç: —Å–æ–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ–¥–µ–ª–∏ –∏–∑ RSS-—Å—Å—ã–ª–æ–∫ (rss_sources.yaml),
–¥–µ–ª–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –∏ –ø—É–±–ª–∏–∫—É–µ–º –æ–¥–∏–Ω –ø–æ—Å—Ç.
"""
import time, yaml, feedparser, logging
from datetime import datetime, timedelta
from common import send_telegram, build_caption, gpt_summarize

LOOKBACK_DAYS = 7

def load_sources():
    with open("rss_sources.yaml", "r", encoding="utf-8") as f:
        data = yaml.safe_load(f) or {}
    return data.get("sources", [])

def collect_titles():
    since = time.time() - LOOKBACK_DAYS * 86400
    titles = []
    for src in load_sources():
        feed = feedparser.parse(src)
        for e in feed.entries:
            ts = None
            if getattr(e, "published_parsed", None):
                ts = time.mktime(e.published_parsed)
            elif getattr(e, "updated_parsed", None):
                ts = time.mktime(e.updated_parsed)
            if ts and ts >= since:
                t = getattr(e, "title", "")
                if t: titles.append(t)
    return titles[:100]

def main():
    titles = collect_titles()
    if not titles:
        logging.info("–ó–∞ –Ω–µ–¥–µ–ª—é –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    joined = "\n".join([f"- {t}" for t in titles[:40]])
    prompt = ("–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä –∫–∏–Ω–æ-–Ω–æ–≤–æ—Å—Ç–µ–π (5‚Äì7 –ø—É–Ω–∫—Ç–æ–≤). "
              "–û–ø–∏—Ä–∞–π—Å—è –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∏–∂–µ, –≤—ã–¥–µ–ª—è–π –≥–ª–∞–≤–Ω–æ–µ, –ø–∏—à–∏ —ë–º–∫–æ –∏ –±–µ–∑ —Å–ø–æ–π–ª–µ—Ä–æ–≤.\n\n" + joined)
    text = gpt_summarize(prompt, max_tokens=500) or "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç: —Ç–∏—Ö–∞—è –Ω–µ–¥–µ–ª—è –≤ –∫–∏–Ω–æ."
    caption = build_caption("üóì –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏", text)
    ok = send_telegram(caption)
    if ok:
        logging.info("–ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã")
    else:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç")

if __name__ == "__main__":
    main()
