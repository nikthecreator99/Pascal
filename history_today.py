"""
–°–µ–≥–æ–¥–Ω—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∏–Ω–æ: –±–µ—Ä—ë–º —Å–æ–±—ã—Ç–∏—è –¥–Ω—è —Å Wikipedia 'on this day' API,
—Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–∏–Ω–æ-—Å–æ–±—ã—Ç–∏—è –∏ –¥–µ–ª–∞–µ–º –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –ø–æ—Å—Ç.
"""
import os, time, requests, logging, datetime as dt
from common import gpt_summarize, send_telegram, build_caption

ENPOINT = "https://en.wikipedia.org/api/rest_v1/feed/onthisday/events/{month}/{day}"
KEYWORDS = ["film", "movie", "cinema", "director", "actor", "actress", "Academy Award", "Oscars", "Cannes", "Venice Film Festival", "Sundance"]

def fetch_events():
    today = dt.datetime.utcnow()
    url = ENPOINT.format(month=today.month, day=today.day)
    r = requests.get(url, timeout=15, headers={"User-Agent":"UsyPaskalyaBot/1.1"})
    r.raise_for_status()
    return r.json().get("events", [])

def filter_cinema(events):
    out = []
    for e in events:
        txt = e.get("text","") or e.get("extract","")
        if not txt: continue
        if any(k.lower() in txt.lower() for k in KEYWORDS):
            year = e.get("year","")
            out.append(f"{year}: {txt}")
    return out

def main():
    try:
        events = fetch_events()
    except Exception as e:
        logging.error(f"history fetch failed: {e}")
        return
    items = filter_cinema(events)[:8]
    if not items:
        logging.info("history: nothing relevant")
        return
    joined = "\n".join(f"- {x}" for x in items)
    prompt = ("–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫—É—é —Ä—É–±—Ä–∏–∫—É ¬´–°–µ–≥–æ–¥–Ω—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∏–Ω–æ¬ª: 4‚Äì6 –ø—É–Ω–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. "
              "–í—ã–¥–µ–ª—è–π –≥–ª–∞–≤–Ω–æ–µ, –±–µ–∑ —Å–ø–æ–π–ª–µ—Ä–æ–≤ –∏ –≤–æ–¥—ã. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.\n\n" + joined)
    text = gpt_summarize(prompt, max_tokens=420) or ("–°–µ–≥–æ–¥–Ω—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∏–Ω–æ:\n" + joined)
    caption = build_caption("üóì –°–µ–≥–æ–¥–Ω—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∏–Ω–æ", text)
    ok = send_telegram(caption)
    if ok:
        logging.info("history sent")
    else:
        logging.error("history send failed")

if __name__ == "__main__":
    main()
